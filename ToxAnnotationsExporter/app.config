<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="ToxAnnotationsExporter.My.MySettings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <system.diagnostics>
        <sources>
            <!-- This section defines the logging configuration for My.Application.Log -->
            <source name="DefaultSource" switchName="DefaultSwitch">
                <listeners>
                    <add name="FileLog"/>
                    <!-- Uncomment the below section to write to the Application Event Log -->
                    <!--<add name="EventLog"/>-->
                </listeners>
            </source>
        </sources>
        <switches>
            <add name="DefaultSwitch" value="Information" />
        </switches>
        <sharedListeners>
            <add name="FileLog"
                 type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL"
                 initializeData="FileLogWriter"/>
            <!-- Uncomment the below section and replace APPLICATION_NAME with the name of your application to write to the Application Event Log -->
            <!--<add name="EventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="APPLICATION_NAME"/> -->
        </sharedListeners>
    </system.diagnostics>
    <userSettings>
        <ToxAnnotationsExporter.My.MySettings>
            <setting name="HideBooksWithoutAnnotations" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="CreateSeparateFileForEachBook" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="InsertBookInformation" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="CreateInlineImages" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="ExpandMarkedText" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="CharactersToExpandMarkedTextBy" serializeAs="String">
                <value>100</value>
            </setting>
            <setting name="HighlightOriginalMark" serializeAs="String">
                <value>True</value>
            </setting>
            <setting name="HtmlExport_CSS" serializeAs="String">
                <value>body { text-align: justify; }
#annotationsTable { margin-top: 40px; }
#saveLayer { display:none; position: fixed; top: 0; left: 0; width: 100%; margin: 0; padding: 10px; background-color: #7f93c4; color: #FFFFFF; text-align: center; }
#saveLayer a { color: #FFFFFF; }
table, tr, td, th { border-style: solid; border-width: 1px; border-color: #055f9d; border-collapse: collapse; }
th { text-align: left; vertical-align: top; padding: 5px; }
td { text-align: justify; vertical-align: top; padding: 5px; }
p { text-align: justify;  margin: 0; text-indent: 1em; }
span.AnnotationHighlight { background-color: yellow }</value>
            </setting>
            <setting name="HtmlExport_SaveLayer" serializeAs="String">
              <value>[div id="saveLayer"]The contents of the annotations have been modified, do you wish to [a id="saveLink" href="javascript:save()"]save the changes (download new file)[/a] or [a id="discardLink" href="javascript:discard()"]discard them (reload the page)[/a]?[/div]</value>
            </setting>
            <setting name="HtmlExport_BookHead" serializeAs="String">
                <value>[table id="annotationsTable" width='100%']</value>
            </setting>
            <setting name="HtmlExport_BookInformation" serializeAs="String">
                <value>[tr bgcolor='#e0ffff'][th align='left' colspan='3'][font size='+1']%AUTHOR%[/font][br][font size='+2']%TITLE%[/font][br][font size='-1'][i]%FILE_NAME%[/i][/font][/th][/tr]</value>
            </setting>
            <setting name="HtmlExport_AnnotationsHead" serializeAs="String">
                <value>[tr bgcolor='#e0ffff'][th align='center' style='width:2%']Page[/th][th align='center' style='width:49%']Marked Text[/th][th align='center' style='width:49%']Annotation[/th][/tr]</value>
            </setting>
            <setting name="HtmlExport_Annotation" serializeAs="String">
                <value>[tr][td]%PAGE%[/td][td]%MARKED_TEXT%[/td][td contenteditable="true"]%ANNOTATION%[/td][/tr]</value>
            </setting>
            <setting name="HtmlExport_AnnotationHighlightStart" serializeAs="String">
                <value>[span class="AnnotationHighlight"]</value>
            </setting>
            <setting name="HtmlExport_AnnotationHighlightEnd" serializeAs="String">
                <value>[/span]</value>
            </setting>
            <setting name="HtmlExport_AnnotationsSeparator" serializeAs="String">
                <value />
            </setting>
            <setting name="HtmlExport_AnnotationsNotAvailable" serializeAs="String">
                <value>[tr][td colspan='3'][i]No annotations available[/i][/td][/tr]</value>
            </setting>
            <setting name="HtmlExport_BookTail" serializeAs="String">
                <value>[/table]\n[br][br]</value>
            </setting>
            <setting name="PageNumberDecimalPlaces" serializeAs="String">
                <value>0</value>
            </setting>
            <setting name="HtmlExport_Script" serializeAs="String">
              <value>
                var save = function(){};
                var discard = function(){};
                (function(){
                  var edited = false;

                  var editableCells = document.querySelectorAll('td[contenteditable="true"]');
                  for (var i = 0; i &lt; editableCells.length; i++) {
                  var cell = editableCells[i];
                  addEvent(cell, 'input', function(){
                  annotationsEdited();
                  });
                  }

                  function annotationsEdited() {
                    if (edited === true) { return; }
                    edited = true;
                    showSaveLayer();
                  }

                  function showSaveLayer() {
                    document.querySelectorAll('#saveLayer')[0].style.display = 'block';
                  }

                  function hideSaveLayer() {
                    document.querySelectorAll('#saveLayer')[0].style.display = null;
                  }

                  save = function() {
                    edited = false;
                    // It is important to hide the save dialog before reading the source of the page, or the
                    // newly generated file will show the save dialog on load
                    hideSaveLayer();
                    generateDownload(getFilenameFromUrl(), generateHtmlFromSourceCode());
                    }
                    discard = function() {
                    edited = false;
                    window.location.reload();
                  }

                  function getFilenameFromUrl() {
                    var url = window.location.pathname;
                    var filename = decodeURIComponent(url.substring(url.lastIndexOf('/')+1));

                    // Strip, if present, the automatic numbering some browsers do when saving a file with a filename
                    // that already exists, like "file (1)", "file (2)", "file (3)". This will leave the
                    // "original" file name, so the browser can resume numbering from there.
                    filename = filename.replace(/ \(([0-9]+)\)\./, '.', filename);

                    return filename;
                  }

                  function generateHtmlFromSourceCode() {
                    var html = '&lt;!doctype html&gt;\n';
                    html    += '&lt;html&gt;\n';
                    html    += '&lt;head&gt;\n';
                    html    += document.head.innerHTML.trim() + '\n';
                    html    += '&lt;/head&gt;\n';
                    html    += '&lt;body&gt;\n';
                    html    += document.body.innerHTML.trim() + '\n';
                    html    += '&lt;/body&gt;\n';
                    html    += '&lt;/html&gt;';
                    return html;
                  }

                  function generateDownload(fileName, fileContent) {
                    var a = document.createElement('a');
                    a.href = 'data:text/html;charset=utf-8;base64,' + b64EncodeUnicode(fileContent);
                    a.setAttribute('download', fileName);
                    a.style.display = 'none';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                  }

                  function b64EncodeUnicode(str) {
                    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {
                    return String.fromCharCode('0x' + p1);
                    }));
                  }

                  function b64DecodeUnicode(str) {
                    return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                    }).join(''));
                  }

                  function addEvent(element, eventName, handler) {
                    if (element.addEventListener) {
                    element.addEventListener(eventName, handler, false);
                    } else if (element.attachEvent) {
                    element.attachEvent('on' + eventName, handler);
                    } else {
                    console.log ('Warning! No handling possible for element');
                    }
                  }

                  addEvent(window, 'beforeunload', function(e){
                    // Notice that to avoid scamming, chromium (and hence chrome) has disabled the possibility to set
                    // a custom message in the dialog. The user will be presented with a predefined dialog that is
                    // easy to understand. Firefox has adopted the same policy.
                    // This may or may not display the custom message on other browsers.
                    if (edited === true) {
                    var msg = 'There are unsaved changes. Do you wish to exit without saving the changes?\n';
                    msg    += 'If you click accept, all changes will be lost. If you click cancel, you will be allowed ';
                    msg    += 'to save your changes before exiting.';

                    (e || window.event).returnValue = msg; // Some browsers use this
                    return msg; // And others use this
                    }
                    });
                }());
              </value>
            </setting>
        </ToxAnnotationsExporter.My.MySettings>
    </userSettings>
</configuration>
